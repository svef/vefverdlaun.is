grid, column { display: block; }

grid {
  @function grid-calc($colNumber, $totalColumns: $grid-columns) {
    @return percentage($colNumber / $totalColumns);
  }
  @mixin grid-columns($className: 'span') {
    @for $col from 1 through $grid-columns {
      &.#{$className}-#{$col} { width: grid-calc($col); }
    }
  }
  @mixin grid-offset($className: '') {
    @if($className != '') {
      $className: "#{$className}-";
    }
    @for $col from 1 through $grid-columns {
      &.#{$className}offset-#{$col} { margin-left: grid-calc($col); }
    }
  }
  @mixin grid-ordering($className: '') {
    @if($className != '') {
      $className: "#{$className}-";
    }

    @for $col from 1 through $grid-columns {
      &.#{$className}push-#{$col} { left: grid-calc($col); }
      &.#{$className}pull-#{$col} { right: grid-calc($col); }
    }
  }

  @include clearfix;
  margin: 0 auto;
  padding-left: $grid-gutter/2;
  padding-right: $grid-gutter/2;

  width: 100%;
  max-width: $page-max-width;
  text-align: center;

  grid, column > & {
    margin-left: -$grid-gutter;
    margin-right: -$grid-gutter;
    width: auto;
    max-width: none;
  }

  column {
    @include clearfix;
    position: relative;
    display: inline-block;
    vertical-align: top;
    width: 100%;

    min-height: 1px;
    padding-left: $grid-gutter/2;
    padding-right: $grid-gutter/2;

    text-align: left;

    @each $i in $breakArray {
      @include respond-to(nth($i,1)) {
        @include grid-columns(nth($i,1));
        @include grid-offset('#{nth($i,1)}-up');
        @include grid-ordering('#{nth($i,1)}-up');
      }

      @include respond-to('#{nth($i,1)}-only') {
        @include grid-offset(nth($i,1));
        @include grid-ordering(nth($i,1));
      }
    }

    @include grid-offset();
    @include grid-ordering();
  }

  &.no-gutter {
    padding-left: 0;
    padding-right: 0;

    > column {
      padding-left: 0;
      padding-right: 0;
    }
  }
}
